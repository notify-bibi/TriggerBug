
State_Tag success_ret3(State* s) {
    s->solv.push();
    UChar bf[] = { 0xEC, 0x29, 0xE3, 0x41, 0xE1, 0xF7, 0xAA, 0x1D, 0x29, 0xED, 0x29, 0x99, 0x39, 0xF3, 0xB7, 0xA9, 0xE7, 0xAC, 0x2B, 0xB7, 0xAB, 0x40, 0x9F, 0xA9, 0x31, 0x35, 0x2C, 0x29, 0xEF, 0xA8, 0x3D, 0x4B, 0xB0, 0xE9, 0xE1, 0x68, 0x7B, 0x41 };

    auto enc = s->regs.Iex_Get<Ity_I64>(AMD64_IR_OFFSET::rdi);
    for (int i = 0; i < 38; i++) {
        Vns e = s->mem.Iex_Load<Ity_I8>(enc + i);
        s->add_assert(e == (UChar)bf[i], True);
    }
    vex_printf("checking\n\n");
    auto dfdfs = s->solv.check();
    if (dfdfs == sat) {
        vex_printf("issat");
        auto m = s->solv.get_model();
        std::cout << m << std::endl;
        exit(0);
    }
    else {
        vex_printf("unsat??????????\n\n%d", dfdfs);
    }
    s->solv.pop();
    return Death;
}

int main() {
    StatePrinter<StateAMD64> state(INIFILENAME, 0, True);
    TRGL::VexGuestAMD64State reg(state);
    for (int i = 0; i < 38; i++) {
        auto flag = state.get_int_const(8);
        auto ao3 = flag >= 1 && flag <= 128;
        state.mem.Ist_Store(reg.guest_RDI + i, flag);
        state.add_assert(ao3, 1);
    }
    state.hook_add(0x000400E7A, pp);
    state.hook_add(0x400CC0, success_ret3);
    StateAnalyzer gv(state);
    gv.Run();
}



PS C:\Users\bibi\Desktop\TriggerBug\PythonFrontEnd\examples> python .\str2flag.py "sat(define-fun p_20 () (_ BitVec 8)
>>   #x66)
>> (define-fun p_24 () (_ BitVec 8)
>>   #x79)
>> (define-fun p_8 () (_ BitVec 8)
>>   #x6c)
>> (define-fun p_23 () (_ BitVec 8)
>>   #x5f)
>> (define-fun p_25 () (_ BitVec 8)
>>   #x6f)
>> (define-fun p_28 () (_ BitVec 8)
>>   #x5f)
>> (define-fun p_31 () (_ BitVec 8)
>>   #x6e)
>> (define-fun p_37 () (_ BitVec 8)
>>   #x65)
>> (define-fun p_36 () (_ BitVec 8)
>>   #x74)
>> (define-fun p_22 () (_ BitVec 8)
>>   #x72)
>> (define-fun p_16 () (_ BitVec 8)
>>   #x5f)
>> (define-fun p_33 () (_ BitVec 8)
>>   #x69)
>> (define-fun p_5 () (_ BitVec 8)
>>   #x67)
>> (define-fun p_21 () (_ BitVec 8)
>>   #x6f)
>> (define-fun p_11 () (_ BitVec 8)
>>   #x61)
>> (define-fun p_26 () (_ BitVec 8)
>>   #x75)
>> (define-fun p_29 () (_ BitVec 8)
>>   #x76)
>> (define-fun p_30 () (_ BitVec 8)
>>   #x69)
>> (define-fun p_6 () (_ BitVec 8)
>>   #x69)
>> (define-fun p_1 () (_ BitVec 8)
>>   #x68)
>> (define-fun p_2 () (_ BitVec 8)
>>   #x61)
>> (define-fun p_14 () (_ BitVec 8)
>>   #x6e)
>> (define-fun p_17 () (_ BitVec 8)
>>   #x6e)
>> (define-fun p_10 () (_ BitVec 8)
>>   #x73)
>> (define-fun p_34 () (_ BitVec 8)
>>   #x63)
>> (define-fun p_18 () (_ BitVec 8)
>>   #x6f)
>> (define-fun p_9 () (_ BitVec 8)
>>   #x5f)
>> (define-fun p_27 () (_ BitVec 8)
>>   #x72)
>> (define-fun p_7 () (_ BitVec 8)
>>   #x72)
>> (define-fun p_3 () (_ BitVec 8)
>>   #x74)
>> (define-fun p_13 () (_ BitVec 8)
>>   #x69)
>> (define-fun p_15 () (_ BitVec 8)
>>   #x67)
>> (define-fun p_12 () (_ BitVec 8)
>>   #x79)
>> (define-fun p_19 () (_ BitVec 8)
>>   #x5f)
>> (define-fun p_32 () (_ BitVec 8)
>>   #x64)
>> (define-fun p_0 () (_ BitVec 8)
>>   #x74)
>> (define-fun p_35 () (_ BitVec 8)
>>   #x61)
>> (define-fun p_4 () (_ BitVec 8)
>>   #x5f)"
namespace: <p_>       len: 38{
        chars     : <that_girl_saying_no_for_your_vindicate>
        chars     : < t h a t _ g i r l _ s a y i n g _ n o _ f o r _ y o u r _ v i n d i c a t e>
        hexstring = "746861745f6769726c5f736179696e675f6e6f5f666f725f796f75725f76696e646963617465"
        p_buff[38] = {0x74,0x68,0x61,0x74,0x5f,0x67,0x69,0x72,0x6c,0x5f,0x73,0x61,0x79,0x69,0x6e,0x67,0x5f,0x6e,0x6f,0x5f,0x66,0x6f,0x72,0x5f,0x79,0x6f,0x75,0x72,0x5f,0x76,0x69,0x6e,0x64,0x69,0x63,0x61,0x74,0x65};

}
[patch_byte(addr+i, ord(v)) for i,v in enumerate(base64.b16decode(hexstring))]
PS C:\Users\bibi\Desktop\TriggerBug\PythonFrontEnd\examples>








